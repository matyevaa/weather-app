{"version":3,"sources":["pages/weatherBody.jsx","hooks/UseFetch.js","pages/error.jsx","pages/search.jsx","pages/weatherData.jsx","images/logo.png","images/landscape1.jpg","App.js","api/conf.js","index.js"],"names":["card","css","WeatherBody","dt","temp_min","temp_max","description","icon","date","Date","className","src","toLocaleDateString","toLocaleTimeString","UseFetch","initialUrl","useState","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","console","log","catch","center","ErorPage","btn","searchStyle","nav","SearchCity","onSearch","city","setCity","onChange","event","target","value","placeholder","onKeyPress","e","key","onClick","align","wrapper","sep","WeatherData","forecasts","map","main","weather","charAt","toUpperCase","slice","App","backImg","Wall1","bars","justify","foot","styles","Logo","list","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d3a2d1f.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport React, { useState } from 'react';\r\nimport { css, jsx } from '@emotion/react';\r\n\r\n\r\nconst card = css`\r\n  img {\r\n    top: 0;\r\n  }\r\n`;\r\n\r\n\r\nconst WeatherBody =  ({dt, temp_min, temp_max, description, icon}) => {\r\n\r\n  const date = new Date(dt);\r\n\r\n    return (\r\n      <div className=\"card\" css={card}>\r\n        <div className=\"image\">\r\n          <img src={`http://openweathermap.org/img/w/${icon}.png`}/>\r\n        </div>\r\n        <div className=\"cardBody\">\r\n          <h3 className=\"title\">{description}</h3>\r\n          <p>\r\n            {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n          </p>\r\n          <p>Min: {temp_min}°C</p>\r\n          <p>Max: {temp_max}°C</p>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\nexport default WeatherBody;\r\n","import {useState, useEffect} from 'react';\r\n\r\nconst UseFetch = (initialUrl) => {\r\n\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if(!url)\r\n      return;\r\n    setIsLoading(true);\r\n    setData(null);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n\r\n            setIsLoading(false);\r\n            if(data.cod >= 400) {\r\n                setError(data.message);\r\n                return;\r\n            }\r\n            setData(data);\r\n            console.log(data);\r\n        })\r\n        .catch((error) => {\r\n            setIsLoading(false);\r\n            setError(error);\r\n        });\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl };\r\n};\r\n\r\n\r\nexport default UseFetch;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { css, jsx } from '@emotion/react';\r\n\r\n\r\nconst error = css`\r\n  border-style: ridge;\r\n  width: 25rem;\r\n  text-align: center;\r\n  background: rgba(255,255,255, 0.6);\r\n`;\r\n\r\nconst center = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\n\r\nconst ErorPage = () => {\r\n\r\n  return (\r\n  <div css={center}>\r\n    <div css={error}>\r\n      <h3>Please enter a city name to get the forecast.</h3>\r\n      <h4>Example: Corvallis</h4>\r\n      <h3>Then hit Enter or Go to get the forecast.</h3>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default ErorPage;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React, { useState } from 'react';\r\nimport ErrorPage from \"./error\";\r\nimport { Global, css, jsx } from '@emotion/react';\r\n\r\n\r\nconst btn = css`\r\n  height: 40px;\r\n  margin-top: 9px;\r\n  box-shadow: 3px 4px 0px 0px #899599;\r\n  background:linear-gradient(to bottom, #ededed 5%, #bab1ba 100%);\r\n  background-color:#ededed;\r\n  border-radius:15px;\r\n  border:1px solid #d6bcd6;\r\n  display:inline-block;\r\n  cursor:pointer;\r\n  color:#3a8a9e;\r\n  font-family:Arial;\r\n  font-size:17px;\r\n  padding:7px 25px;\r\n  text-decoration:none;\r\n  text-shadow:0px 1px 0px #e1e2ed;\r\n  outline: none;\r\n\r\n  :hover {\r\n  background:linear-gradient(to bottom, #bab1ba 5%, #ededed 100%);\r\n  background-color:#bab1ba;\r\n  }\r\n  :active {\r\n    position:relative;\r\n    top:1px;\r\n  }\r\n\r\n`;\r\n\r\nconst searchStyle = css`\r\n    width: 310px;\r\n    padding: 12px;\r\n    appearance: none;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n    border-radius: 15px;\r\n    box-shadow: 0px 5px rgba(0, 0, 0, 0.2);\r\n    color: #black;\r\n    font-size: 18px;\r\n    position: relative;\r\n    margin: 7px;\r\n    margin-bottom: 70px;\r\n  `;\r\n\r\nconst nav = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n`;\r\n\r\n\r\nconst SearchCity = ({onSearch}) => {\r\n    const [city, setCity] = useState('');\r\n\r\n    const hitEnter = (e) =>  {\r\n      if (e.key === \"Enter\")\r\n        onSearch(city);\r\n    };\r\n\r\n    return (\r\n          <div css={nav}>\r\n            <input\r\n              css={searchStyle}\r\n              onChange={(event) => setCity(event.target.value)}\r\n              value={city}\r\n              placeholder=\"Search by city name\"\r\n              onKeyPress={hitEnter}\r\n            />\r\n          <button css={btn} onClick={() => onSearch(city)}>Go</button>\r\n          </div>\r\n\r\n    );\r\n  };\r\n\r\n\r\nexport default SearchCity;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport WeatherBody from './weatherBody';\r\nimport ErrorPage from \"./error\";\r\nimport { css, jsx } from '@emotion/react';\r\n\r\n\r\nconst align = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst wrapper = css`\r\n  border-style: ridge;\r\n  width: 70rem;\r\n  text-align: center;\r\n  background: rgba(255,255,255, 0.6);\r\n  ${align};\r\n`;\r\n\r\nconst sep = css`\r\n  padding: 10px 50px;\r\n`;\r\n\r\n\r\nconst center = css`\r\n  ${align};\r\n`;\r\n\r\nconst WeatherData = ({forecasts}) => {\r\n\r\n  return (\r\n    <div css={center}>\r\n      <div css={wrapper}>\r\n         {forecasts.map(({dt,main, weather}) => (\r\n              <div css={sep} key={dt}>\r\n                  <WeatherBody temp_max={main.temp_max} temp_min={main.temp_min} dt={dt * 1000}\r\n                    description={weather[0].description.charAt(0).toUpperCase() + weather[0].description.slice(1)} icon={weather[0].icon}/>\r\n              </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default WeatherData;\r\n","export default __webpack_public_path__ + \"static/media/logo.732016f9.png\";","export default __webpack_public_path__ + \"static/media/landscape1.c58643a7.jpg\";","/** @jsxImportSource @emotion/react */\r\nimport React, { useState } from 'react';\r\nimport { Global, css, jsx } from '@emotion/react';\r\nimport {API_KEY, API_SOURCE} from './api/conf'\r\nimport WeatherBody from './pages/weatherBody';\r\nimport UseFetch from './hooks/UseFetch';\r\nimport SearchCity from './pages/search'\r\nimport WeatherData from './pages/weatherData';\r\nimport ErrorPage from \"./pages/error\";\r\nimport Logo from \"./images/logo.png\";\r\nimport Wall1 from \"./images/landscape1.jpg\";\r\n\r\nfunction App() {\r\n\r\n  const {data, error, isLoading, setUrl} = UseFetch();\r\n\r\n  const content = () => {\r\n    if(error) return <ErrorPage/>\r\n    if(!data && isLoading) return <h2 css={justify}>Wait a min...</h2>\r\n    if(!data) return null;\r\n    return <WeatherData forecasts={data.list} />\r\n  };\r\n\r\n  const backImg = css`\r\n    background-image: url(${Wall1});\r\n  `;\r\n\r\n  const bars = css`\r\n    height: 150px;\r\n    width: 96px;\r\n  `;\r\n\r\n  const justify = css`\r\n    display: flex;\r\n    justify-content: center;\r\n  `;\r\n\r\n  const center = css`\r\n    ${justify};\r\n    margin-top: 10px;\r\n    margin-bottom: -15px;\r\n  `;\r\n\r\n  const foot = css`\r\n    color: white;\r\n    opacity: 0.3;\r\n    bottom: 0;\r\n    position: absolute;\r\n    right: 0;\r\n  `;\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Global\r\n          styles={css`\r\n            body {\r\n              overflow: hidden;\r\n              background-repeat: no-repeat;\r\n              color: black;\r\n              font-family: Garamond;\r\n              ${backImg};\r\n            }\r\n          `} />\r\n\r\n        <div css={center}>\r\n          <img css={bars} src={Logo}/>\r\n        </div>\r\n        <div>\r\n          <SearchCity onSearch={(city) => setUrl(`${API_SOURCE}/data/2.5/forecast?q=${city}&cnt=5&units=imperial&appid=${API_KEY}`)} />\r\n          {content()}\r\n        </div>\r\n        <footer css={foot}>Copyright © 2021 Ilbirs For. All Rights Reserved.</footer>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","export const API_KEY = '1cb9aeb785ddcade1eef5973db409596';\r\nexport const API_SOURCE = 'http://api.openweathermap.org/';\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}